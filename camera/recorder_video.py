import os
import time
import cv2
import pytz
from datetime import datetime
import pvporcupine
from pvrecorder import PvRecorder
import keyboard

# === CONFIGURATION ===
ACCESS_KEY = "QGobPJP9Rzl7HaJdOhzn3Gs3RW7aWyLQVHtUh+NOfeI2+SffLM+eqQ=="  
KEYWORDS = ["jarvis", "terminator"]     # jarvis = start vid√©o, terminator = stop vid√©o
SENSITIVITY = 0.9                       # plus proche de 1 = plus sensible
SAVE_DIR = "video"                      # dossier o√π sauvegarder les vid√©os
MAX_RECORD_S = 3600                     # dur√©e max d‚Äôun enregistrement (ici 1h)


# === UTILITAIRES ===

def ensure_dir(path):
    """Cr√©er le dossier s‚Äôil n‚Äôexiste pas."""
    os.makedirs(path, exist_ok=True)

def paris_now():
    """Retourne la date/heure de lyon."""
    return datetime.now(pytz.timezone("Europe/Paris"))

def paris_filename():
    """Cr√©e un nom unique pour chaque fichier vid√©o bas√© sur la date/heure."""
    return paris_now().strftime("%Y-%m-%d_%H-%M-%S") + ".avi"


# === FONCTION PRINCIPALE ===
def detect_keyword_video():
    ensure_dir(SAVE_DIR)  # s‚Äôassure que le dossier existe

    # Charger le mod√®le HaarCascade pour la d√©tection faciale (OpenCV)
    face_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + "haarcascade_frontalface_default.xml")
    if face_cascade.empty():
        raise RuntimeError("‚ùå Impossible de charger le mod√®le de d√©tection faciale OpenCV.")

    # Initialiser Porcupine pour √©couter les mots-cl√©sco
    porcupine = pvporcupine.create(
        access_key=ACCESS_KEY,
        keywords=KEYWORDS,
        sensitivities=[SENSITIVITY]*len(KEYWORDS)
    )

    # Initialiser l‚Äôenregistreur (micro) pour Porcupine
    frame_length = porcupine.frame_length
    recorder = PvRecorder(frame_length=frame_length)
    recorder.start()

    print(f"üé§ √âcoute vid√©o... Dis '{KEYWORDS[0]}' pour d√©marrer, '{KEYWORDS[1]}' pour arr√™ter.")
    print("Appuie sur [ESPACE] pour quitter.\n")

    # Variables d‚Äô√©tat
    recording = False
    cap = None
    out = None
    record_start_time = 0
    filename = None

    try:
        while not keyboard.is_pressed("space"):  # boucle principale
            pcm = recorder.read()  
            keyword_index = porcupine.process(pcm)  # -1 si rien, 0 = jarvis, 1 = terminator

            # === Si on est en train d‚Äôenregistrer ===
            if recording:
                ret, frame = cap.read()
                if not ret:
                    break  # si probl√®me avec la cam√©ra ‚Üí stop

                # --- D√©tection faciale ---
                gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
                faces = face_cascade.detectMultiScale(
                    gray,
                    scaleFactor=1.1,
                    minNeighbors=5,
                    minSize=(30, 30)
                )

                # Dessiner un rectangle vert pour chaque visage d√©tect√©
                for (x, y, w, h) in faces:
                    cv2.rectangle(frame, (x, y), (x+w, y+h), (0, 255, 0), 2)

                # ‚úÖ Nouveau : afficher le nombre de visages d√©tect√©s dans la console
                if len(faces) > 0:
                    print(f"üë§ {len(faces)} visage(s) d√©tect√©(s)")

                # ‚úÖ Nouveau : afficher le temps √©coul√© sur la vid√©o
                elapsed = int(time.time() - record_start_time)
                cv2.putText(frame, f"Time: {elapsed}s", (10, 30),
                            cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 255), 2)

                # Sauvegarde + affichage
                out.write(frame)
                cv2.imshow("Recording Video + Face Detection", frame)

                # Arr√™t automatique si dur√©e max d√©pass√©e
                if elapsed > MAX_RECORD_S:
                    print(f"\n‚èπÔ∏è Arr√™t auto apr√®s {MAX_RECORD_S} secondes.")
                    recording = False

                # Arr√™t manuel si touche Q press√©e
                if cv2.waitKey(1) & 0xFF == ord("q"):
                    recording = False

            # === D√©marrage vid√©o avec le mot "jarvis" ===
            if not recording and keyword_index == 0:
                filename = os.path.join(SAVE_DIR, paris_filename())
                cap = cv2.VideoCapture(0)  # ouvre la cam√©ra
                fourcc = cv2.VideoWriter_fourcc(*'XVID')  # codec vid√©o
                fps = 20.0
                width = int(cap.get(3))   # largeur de la vid√©o
                height = int(cap.get(4))  # hauteur de la vid√©o
                out = cv2.VideoWriter(filename, fourcc, fps, (width, height))

                recording = True
                record_start_time = time.time()
                print("‚ñ∂Ô∏è Mot-cl√© 'jarvis' d√©tect√© : d√©marrage vid√©o avec d√©tection faciale...")

            # === Arr√™t vid√©o avec le mot "terminator" ===
            elif recording and keyword_index == 1:
                recording = False
                print(f"‚èπÔ∏è Mot-cl√© 'terminator' d√©tect√© : arr√™t de la vid√©o -> {filename}")

    except KeyboardInterrupt:
        print("\nProgramme vid√©o arr√™t√© manuellement.")

    finally:
        # Nettoyage (lib√©ration des ressources)
        recorder.stop()
        recorder.delete()
        porcupine.delete()
        if cap:
            cap.release()
        if out:
            out.release()
        cv2.destroyAllWindows()


# === Lancement du programme ===
if __name__ == "__main__":
    detect_keyword_video()
